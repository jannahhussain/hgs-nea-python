# Flask API for User Authentication
from flask import Flask, request, jsonify, session
from werkzeug.security import generate_password_hash, check_password_hash
from flask_sqlalchemy import SQLAlchemy
import re

# Initializing Flask app and configure database
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# User Model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    security_question = db.Column(db.String(200), nullable=False)
    security_answer = db.Column(db.String(200), nullable=False)

# Utility function- Validate email
def validate_email(email):
    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(pattern, email) is not None

# Utility function- Validate password
def validate_password(password):
    return len(password) >= 8 and re.search(r'\d', password)

# User Registration
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    username = data.get('username')
    email = data.get('email')
    password = data.get('password')
    security_question = data.get('security_question')
    security_answer = data.get('security_answer')

    # Input validation
    if not username or not email or not password or not security_question or not security_answer:
        return jsonify({'error': 'All fields are required'}), 400

    if not validate_email(email):
        return jsonify({'error': 'Invalid email address'}), 400

    if not validate_password(password):
        return jsonify({'error': 'Password must be at least 8 characters long and include a number'}), 400

    hashed_password = generate_password_hash(password)
    hashed_answer = generate_password_hash(security_answer)

    # Checking for duplicate users
    if User.query.filter_by(email=email).first():
        return jsonify({'error': 'Email is already registered'}), 400

    # Adding user to the database
    new_user = User(username=username, email=email, password=hashed_password,
                    security_question=security_question, security_answer=hashed_answer)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({'message': 'User registered successfully'}), 201

# User Login
@app.route('/login', methods=['POST'])
def login():
    data = request.json
    email = data.get('email')
    password = data.get('password')

    # Input validation
    if not email or not password:
        return jsonify({'error': 'Email and password are required'}), 400

    user = User.query.filter_by(email=email).first()
    if not user or not check_password_hash(user.password, password):
        return jsonify({'error': 'Invalid email or password'}), 401

    # Setting session
    session['user_id'] = user.id
    return jsonify({'message': f'Welcome, {user.username}'}), 200

# Reset Password
@app.route('/reset_password', methods=['POST'])
def reset_password():
    data = request.json
    email = data.get('email')
    security_answer = data.get('security_answer')
    new_password = data.get('new_password')

    # Input validation
    if not email or not security_answer or not new_password:
        return jsonify({'error': 'All fields are required'}), 400

    if not validate_password(new_password):
        return jsonify({'error': 'Password must be at least 8 characters long and include a number'}), 400

    user = User.query.filter_by(email=email).first()
    if not user or not check_password_hash(user.security_answer, security_answer):
        return jsonify({'error': 'Security answer is incorrect'}), 403

    # Updating password
    user.password = generate_password_hash(new_password)
    db.session.commit()

    return jsonify({'message': 'Password reset successfully'}), 200

# Logout
@app.route('/logout', methods=['POST'])
def logout():
    session.pop('user_id', None)
    return jsonify({'message': 'Logged out successfully'}), 200

# Error Handling
@app.errorhandler(404)
def not_found_error(e):
    return jsonify({'error': 'Resource not found'}), 404

@app.errorhandler(500)
def internal_server_error(e):
    return jsonify({'error': 'Internal server error occurred'}), 500

# Defensive programming (to prevent accessing restricted routes)
@app.before_request
def restrict_routes():
    allowed_routes = ['/login', '/register', '/reset_password']
    if request.path not in allowed_routes and 'user_id' not in session:
        return jsonify({'error': 'Unauthorized access'}), 401

# Main block to run the Flask app
if __name__ == '__main__':
    with app.app_context():
        db.create_all()  # Create tables
    app.run(debug=True)
